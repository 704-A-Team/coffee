<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oracle.coffee.ordersMapper">

	<!-- product 테이블 select (join product_price) -->
	<select id="selectOrdersProducts" resultType="OrdersProductDto">
		select p.product_code, p.product_name, p.product_order_pack, p.product_unit, pp.price, b.cd_contents
		from product p, product_price pp, bunryu b
		where p.product_code = pp.product_code
		and p.product_isdel = 0 and p.product_isorder = 1
		and b.bcd = 750 and b.mcd = p.product_unit
		and sysdate between pp.start_date and pp.end_date
	</select>
	
	<update id="deliveryOrdersDetail">
		update orders_detail
		set order_detail_status = 2
		where order_detail_status = 1
		and	order_ddate = to_char(sysdate, 'YYYYMMDD')
	</update>
	
	<!-- orders 테이블 insert -->
	<insert id="insertOrders" statementType="CALLABLE" parameterType="OrdersDto">
		call new_orders (
			#{orders_client_code, mode=IN},
			#{order_status, mode=IN},
			#{order_note, mode=IN},
			#{order_code, mode=OUT, jdbcType=INTEGER}
		)
	</insert>
	
	<!-- orders_detail 테이블 insert all -->
	<insert id="insertAllOrdersDetails" parameterType="java.util.List">
		insert all
		<foreach collection="list" item="item" separator=" ">
			into orders_detail values (#{item.order_code}, #{item.product_code}, #{item.order_amount},
				#{item.order_ddate}, #{item.order_datail_status})
		</foreach>
		select * from dual
	</insert>
	
	<!--  orders 테이블 select (join orders_detail) -->
	<resultMap type="OrdersDto" id="OrdersJoinDetail">
		<result property="order_code" column="order_code"/>
		<result property="orders_client_code" column="orders_client_code"/>
		<result property="orders_perm_code" column="orders_perm_code"/>
		<result property="order_note" column="order_note"/>
		<result property="order_refuse" column="order_refuse"/>
		<result property="order_status" column="order_status"/>
		<result property="order_reg_date" column="order_reg_date"/>
		<result property="order_final_price" column="order_final_price"/>
		<result property="order_req_date" column="order_req_date"/>
		<result property="order_confirmed_date" column="order_confirmed_date"/>
		
		<result property="cd_contents" column="cd_contents"/>
		<collection property="orders_details" ofType="OrdersDetailDto" notNullColumn="product_code">
			<result property="order_code" column="order_code"/>
			<result property="product_code" column="product_code"/>
			<result property="order_amount" column="order_amount"/>
			<result property="order_ddate" column="order_ddate"/>
			<result property="order_datail_status" column="order_datail_status"/>
			<result property="detail_cd_contents" column="detail_cd_contents"/>
			<result property="product_name" column="product_name"/>
			<result property="product_order_pack" column="product_order_pack"/>
			<result property="product_unit" column="product_unit"/>
			<result property="product_cd_contents" column="product_cd_contents"/>
			<result property="price" column="price"/>
			<result property="can_order" column="can_order"/>
			<result property="product_name" column="product_name"/>
			<result property="price" column="price"/>
		</collection>
	</resultMap>
	
	<select id="selectOrderByCode" parameterType="int" resultMap="OrdersJoinDetail">
		select a.*, bunryu.cd_contents
		from (
		    select o.*, od.product_code, od.order_amount, od.order_ddate, od.order_detail_status,
		    	   p.product_name, p.product_order_pack, p.product_unit, pp.price, b.cd_contents as detail_cd_contents, pb.cd_contents as product_cd_contents,
		    	   CASE 
        		   	 WHEN p.product_isorder = 1 AND p.product_isdel = 0 AND pp.price IS NOT NULL THEN 1
        			 ELSE 0
    			   END AS can_order
		    from orders o, orders_detail od, product p, product_price pp, bunryu b, bunryu pb
		    where o.order_code = od.order_code(+)
		    	  and od.product_code = p.product_code
		    	  and od.product_code = pp.product_code(+)
		    	  and o.order_code = #{code}
		    	  and sysdate between pp.start_date(+) and pp.end_date(+)
		    	  and b.bcd = 250 and b.mcd = od.order_detail_status
		    	  and pb.bcd = 750 and pb.mcd = p.product_unit
		) a, bunryu
		where bunryu.bcd = 200 and bunryu.mcd = a.order_status
	</select>
	
	<!-- orders_detail 테이블 delete -->
	<delete id="deleteAllOrdersDetails" parameterType="int">
		delete from orders_detail where order_code = #{code}
	</delete>
	
	<!-- orders 테이블 delete -->
	<delete id="deleteOrders" parameterType="int">
		delete from orders where order_code = #{code}
	</delete>
	
	<!-- orders 테이블 update order_note -->
	<update id="updateOrders" parameterType="OrdersDto">
		update orders set order_note = #{order_note} where order_code = #{order_code}
	</update>
	
	<!-- orders 테이블 request update -->
	<update id="requestOrders" parameterType="OrdersDto">
		update orders
		set order_status = #{order_status},
			order_req_date = sysdate
		where order_code = #{order_code}
	</update>
	
	<!-- orders 테이블 count -->
	<select id="totalCountOrders" resultType="int">
		select count(*) from orders
		where order_status != 0
	</select>
	
	<select id="totalCountOrdersByClient" resultType="int" parameterType="int">
		select count(*) from orders
		where orders_client_code = #{code}
	</select>
	
	<!-- orders 테이블 list -->
	<select id="listOrders" parameterType="OrdersPageDto" resultType="OrdersListDto">
		select * from (
			select rownum rn, a.* from (
				select o.*, b.cd_contents, c.client_name, e.emp_name
				from orders o, bunryu b, client_tb c, emp e 
				where o.order_status != 0
				and o.orders_client_code = c.client_code
				and c.client_emp_code = e.emp_code
				and b.bcd = 200 and b.mcd = o.order_status
				order by o.order_code desc
			) a 
		) where rn between #{start} and #{end}
	</select>
	
	<select id="listOrdersByClient" parameterType="OrdersPageDto" resultType="OrdersListDto">
		select * from (
			select rownum rn, a.* from (
				select o.*, b.cd_contents, c.client_name, e.emp_name
				from orders o, bunryu b, client_tb c, emp e 
				where o.orders_client_code = #{client_code}
				and o.orders_client_code = c.client_code
				and c.client_emp_code = e.emp_code
				and b.bcd = 200 and b.mcd = o.order_status
				order by o.order_code desc
			) a 
		) where rn between #{start} and #{end}
	</select>
	
	<!-- orders 테이블 refuse update -->
	<update id="refuseOrders" parameterType="OrdersDto">
		update orders
		set order_status = #{order_status},
			order_refuse = #{order_refuse, jdbcType=VARCHAR},
			<if test="orders_perm_code != 0">
				orders_perm_code = #{orders_perm_code},
			</if>
			order_final_price = #{order_final_price},
			order_confirmed_date = sysdate
		where order_code = #{order_code}
	</update>
	
	<!-- orders 테이블 approve update -->
	<update id="approveOrders" parameterType="OrdersDto">
		update orders
		set order_status = #{order_status},
			orders_perm_code = #{orders_perm_code},
			order_final_price = #{order_final_price},
			order_confirmed_date = sysdate
		where order_code = #{order_code}
	</update>
	
	<!-- orders_detail 테이블 모든 재고 가능한 경우 approve update -->	
	<resultMap id="approvedPrds" type="OrdersDetailDto">
    	<result property="product_code" column="product_code"/>
	</resultMap>
	
	<select id="approveOrdersDetail" statementType="CALLABLE" parameterType="map">
		call approve_orders_detail(
			#{order_code, mode=IN},
			#{enabled_products, mode=OUT, jdbcType=CURSOR, resultMap=approvedPrds}
		)
	</select>
	
	<select id="currentOrder" resultType="OrdersDetailDto">
		<![CDATA[
		SELECT *
		FROM (
		    SELECT  od.order_code,
		            COUNT(od.product_code) AS productCnt,
		            MIN(pt.product_name)   AS productName,
		            MAX(od.order_ddate)    AS order_ddate
		    FROM    orders_detail od
		    LEFT JOIN product pt
		      ON pt.product_code = od.product_code
		    WHERE   od.order_detail_status IN (2, 6)
		      AND   od.order_ddate >= SYSDATE - 7
		    GROUP BY od.order_code
		    ORDER BY MAX(od.order_ddate) DESC
		)
		WHERE ROWNUM <= 5
		]]>
	</select>
	
	<select id="excellentClient" resultType="OrdersDto">
		<![CDATA[
		SELECT sub.orders_client_code,
		       sub.total_price as month_total_price,
		       c.client_name as clientName
		FROM (
		    SELECT  o.orders_client_code,
		            SUM(o.order_final_price) AS total_price
		    FROM    orders o
		    WHERE   TRUNC(o.order_confirmed_date, 'MM') = TRUNC(SYSDATE, 'MM')
		      AND   o.order_status IN (4,6)
		    GROUP BY o.orders_client_code
		    ORDER BY total_price DESC
		) sub
		LEFT JOIN client_tb c
		  ON sub.orders_client_code = c.client_code
		WHERE ROWNUM <= 3
		]]>
	</select>
	
	<select id="monthTotalPrice" resultType="OrdersDto">
		<![CDATA[
		SELECT  product_code, 
				product_name 		as productName, 
				month_total_price
		FROM (
		  SELECT
		      od.product_code
		     ,p.product_name
		     ,SUM(od.order_amount * NVL(pp.price, 0)) AS month_total_price
		  FROM orders o
		  JOIN orders_detail od
		     ON od.order_code = o.order_code
		  LEFT JOIN product p
		     ON p.product_code = od.product_code
		  LEFT JOIN product_price pp
		     ON pp.product_code = od.product_code
		   AND o.order_confirmed_date >= pp.start_date
		   AND o.order_confirmed_date < pp.end_date
		  WHERE TRUNC(o.order_confirmed_date, 'MM') = TRUNC(SYSDATE, 'MM')
		    AND o.order_status IN (4,6)
		  GROUP BY od.product_code, p.product_name
		  ORDER BY month_total_price DESC
		)
		WHERE ROWNUM <= 5
		]]> 
	</select>
	
	
</mapper>